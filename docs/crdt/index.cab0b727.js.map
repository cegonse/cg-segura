{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-9107d568695c9146.js","node_modules/@parcel/runtime-js/lib/runtime-02c3e2d403aa9204.js","node_modules/@parcel/runtime-js/lib/runtime-18506a230cb29e93.js","node_modules/@parcel/runtime-js/lib/runtime-f48e9b9eb9fe93fe.js","node_modules/@parcel/runtime-js/lib/runtime-32ec8174b5066eef.js","node_modules/@parcel/runtime-js/lib/runtime-1bb24f7555892170.js","src/index.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"65tXl\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8Jmxm\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4lEGB\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"9o8ku\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gOduK\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"9vqfN\\\":\\\"index.cab0b727.js\\\",\\\"65tXl\\\":\\\"cursor1.0f7ceab1.png\\\",\\\"8Jmxm\\\":\\\"cursor2.87f29c55.png\\\",\\\"4lEGB\\\":\\\"cursor3.55f14e47.png\\\",\\\"9o8ku\\\":\\\"cursor4.b1e68b38.png\\\",\\\"gOduK\\\":\\\"cursor5.d436a6d3.png\\\"}\"));","const buildChangesMessage = (id, changes) => JSON.stringify({ userId: id, changes: toBase64(changes) });\nconst buildLoginMessage = (id) => JSON.stringify({ userId: id });\nconst buildMoveMessage = (id, profile, x, y) => JSON.stringify({ userId: id, cursor: { profile, x, y }});\nconst findById = (id) => document.querySelector(`#${id}`);\n\nlet userId = `User${Math.floor(Math.random() * 100)}`;\nconst cursorProfile = Math.floor(Math.random() * 5);\nlet connected = false;\nlet scenarioReceived = false;\nlet lastMoveMessage = performance.now();\n\nfindById(\"username\").value = userId;\n\n// We can use Automerge's Document class to keep track of the CRDT\n//\n// In a true local-first scenario, the client could send its version\n// of the document to the backend when deciding to share it, and the\n// backend would forward it to other clients wanting to work on it\n// afterwards. This is important because all clients working on a document\n// must start from the same document, otherwise Automerge will not know\n// how to merge incoming changes\n//\n// To simplify things, in this example the backend will hold the \"master\"\n// copy of the document, and all clients will merge from it\n//\n// Naming it scenario to avoid colliding with DOM's document object BTW\nlet scenario = Automerge.init();\n\nfindById(\"connect\").addEventListener(\"click\", () => {\n  userId = findById(\"username\").value.replace(\" \", \"\");\n  const socket = new WebSocket('ws://4.tcp.eu.ngrok.io:17115');\n\n  socket.addEventListener('message', (event) => {\n    const message = JSON.parse(event.data);\n\n    // Receiving the bare document from the backend. This happens when\n    // the client connects to the server. This is due to assuming the client\n    // has no local state previously\n    //\n    // In a full local first scenario, the client would store its own modifications\n    // through Automerge.save() or Automerge.getLocalChanges(), and sending the whole\n    // document or the deltas to the backend on connection to forward its changes\n    // to the other clients\n    if (message.document) {\n      // Automerge serializes deltas and documents as binary arrays (Uint8Array), so\n      // to simply things we'll use base64 and encapsulate them in JSON objects\n      const binary = fromBase64(message.document);\n\n      // Our starting document will be base + backend contents\n      scenario = Automerge.merge(scenario, Automerge.load(binary));\n      scenarioReceived = true;\n      render();\n    }\n\n    if (message.changes) {\n      const changes = fromBase64(message.changes);\n      // Changes were received from the backend: apply them to our local copy\n      // This works because both endpoints started from the same point (init+backend doc)\n      // In the diff object Automerge generates a binary-serialized difference between\n      // what we had and the previous state\n      const [newScenario, diff] = Automerge.applyChanges(scenario, [changes]);\n      scenario = newScenario;\n      render();\n    }\n\n    if (message.cursor) {\n      if (message.userId === userId) return;\n      addCursor(message);\n    }\n\n    if (message.cursor === undefined) {\n      console.log(\"Received\", message);\n    }\n  });\n\n  const updateNode = (id) => {\n    const nodeId = id.split(\"_\")[0];\n    \n    // When updating the document, the class method change must be used\n    // This receives a new document through the delta, and returns a new\n    // document, as documents are immutable\n    const newScenario = Automerge.change(scenario, (doc) => {\n      const node = doc.nodes.find((n) => n.id === nodeId);\n  \n      if (isChecked(id)) {\n        node.status = \"open\";\n      } else {\n        node.status = \"closed\";\n      }\n    });\n  \n    // Get the diff between the new document we've built and the existing one,\n    // and send it through the tube\n    const changes = Automerge.getChanges(scenario, newScenario);\n    socket.send(buildChangesMessage(userId, changes[0]));\n    console.log(\"New scenario: \", newScenario);\n    \n    scenario = newScenario;\n  }\n\n  socket.addEventListener('open', () => {\n    socket.send(buildLoginMessage(userId));\n    connected = true;\n  });\n\n  document.querySelector(\"body\").addEventListener(\"mousemove\", (e) => {\n    const shouldUpdateCursor = () => performance.now() - lastMoveMessage > 80;\n    if (connected) {\n      if (shouldUpdateCursor()) {\n        socket.send(buildMoveMessage(userId, cursorProfile, e.clientX, e.clientY));\n        lastMoveMessage = performance.now();\n      }\n    }\n  });\n\n  window.updateNode = updateNode;\n});\n\n/////////////////////////////////////////////\n// Rendering code (here be dragons...)\n/////////////////////////////////////////////\n\nconst cursors = [\n  require(\"./images/cursor1.png\"),\n  require(\"./images/cursor2.png\"),\n  require(\"./images/cursor3.png\"),\n  require(\"./images/cursor4.png\"),\n  require(\"./images/cursor5.png\")\n];\n\nconst cursorColors = [\n  \"8a70fc\",\n  \"4bb62c\",\n  \"d9d559\",\n  \"b22212\",\n  \"d82ee5\"\n];\n\nconst cursorTextColors = [\n  \"FFFFFF\",\n  \"FFFFFF\",\n  \"000000\",\n  \"FFFFFF\",\n  \"FFFFFF\",\n];\n\nconst cursorTargetPosition = [];\n\nconst scenarioGraph = [\n  {\n    x: 100,\n    y: 100,\n    id: \"Junction1\",\n    next: \"Junction3\"\n  },\n  {\n    x: 400,\n    y: 100,\n    id: \"Junction2\",\n    next: \"Junction1\"\n  },\n  {\n    x: 100,\n    y: 400,\n    id: \"Junction3\",\n    next: \"Junction4\"\n  },\n  {\n    x: 400,\n    y: 400,\n    id: \"Junction4\",\n    next: \"Junction2\"\n  }\n];\n\nlet deltaTime = 0;\nconst clock = new THREE.Clock();\n\nconst addCursor = (message) => {\n  const cursorId = `${message.userId}_cursor`;\n  const nameId = `${message.userId}_name`;\n\n  if (!findById(cursorId)) {\n    const t = cursorTemplate(message.userId, message.cursor.profile);\n    document.querySelector(\"body\").innerHTML += t;\n  }\n\n  findById(nameId).style[\"background-color\"] = cursorColors[message.cursor.profile];\n  findById(nameId).style[\"color\"] = cursorTextColors[message.cursor.profile];\n\n  const cursorTarget = cursorTargetPosition.find((c) => c.id === message.userId);\n\n  if (cursorTarget === undefined) {\n    cursorTargetPosition.push({ id: message.userId, x: message.cursor.x, y: message.cursor.y });\n  } else {\n    cursorTarget.x = message.cursor.x;\n    cursorTarget.y = message.cursor.y;\n\n  }\n}\n\nconst renderCursors = (dt) => {\n  const cursors = document.querySelectorAll(\"[id$=_cursor]\");\n\n  cursors.forEach((cursor) => {\n    const targetPosition = cursorTargetPosition.find((c) => c.id === cursor.id.split(\"_\")[0]);\n    const cursorRect = cursor.getBoundingClientRect();\n    cursor.style.left = THREE.MathUtils.damp(cursorRect.left, targetPosition.x, 10, dt);\n    cursor.style.top = THREE.MathUtils.damp(cursorRect.top, targetPosition.y, 10, dt);\n  });\n}\n\nanimationFrame();\nfunction animationFrame() {\n  requestAnimationFrame(animationFrame);\n  deltaTime = clock.getDelta();\n  renderCursors(deltaTime);\n}\n\nconst findInGraphById = (id) => scenarioGraph.find((g) => g.id === id);\n\nconst cursorTemplate = (id, profile) => `<div class=\"cursorTooltip\" id=\"${id}_cursor\">\n  <img src=\"${cursors[profile]}\" class=\"cursor\"></img>\n  <span id=\"${id}_name\" class=\"cursorUserId\">${id}</span>\n</div>`;\n\nconst isChecked = (id) => document.querySelector(`#${id}`).checked;\n\nconst nodeTemplate = (id, status) => `<div class=\"node\" id=\"${id}\">\n  <span class=\"nodeItem\"><b>ID</b> <span id=\"${id}_idLabel\">${id}</span></span>\n  <span class=\"nodeItem\"><b>Status</b> <span id=\"${id}_statusLabel\">${status}</span></span>\n  <input class=\"nodeItem\" id=\"${id}_check\" ${status === \"open\" ? \"checked\" : \"\"} type=\"checkbox\" onclick=\"window.updateNode(this.id)\"></input>\n</div>`;\n\nconst render = () => {\n  if (!scenarioReceived) return;\n\n  const canvas = findById(\"canvas\");\n  const ctx = findById(\"canvas\").getContext(\"2d\");\n\n  canvas.width = document.body.clientWidth;\n  canvas.height = document.body.clientHeight;\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  scenario.nodes.forEach((node) => {\n    if (!findById(`${node.id}`)) {\n      const t = nodeTemplate(node.id, node.status);\n      findById(\"nodes\").innerHTML += t;\n    }\n\n    const graphNode = findInGraphById(node.id);\n    const nextNode = findInGraphById(graphNode.next);\n\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.setLineDash(node.status === \"closed\" ? [5, 15] : []);\n    ctx.moveTo(graphNode.x, graphNode.y);\n    ctx.lineTo(nextNode.x, nextNode.y);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.setLineDash([]);\n    ctx.moveTo(graphNode.x, graphNode.y);\n    ctx.lineTo(graphNode.x + 50, graphNode.y + 50);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.arc(graphNode.x, graphNode.y, 10, 0, 2 * Math.PI);\n    ctx.fill();\n    \n    findById(node.id).style.left = graphNode.x + 50;\n    findById(node.id).style.top = graphNode.y + 50;\n    findById(`${node.id}_idLabel`).innerHTML = node.id;\n    findById(`${node.id}_statusLabel`).innerHTML = node.status;\n    findById(`${node.id}_check`).checked = node.status === \"open\";\n  })\n}\n\nconst toBase64 = (buffer) => {\n  var CHUNK_SZ = 0x8000;\n  var c = [];\n  for (var i=0; i < buffer.length; i+=CHUNK_SZ) {\n    c.push(String.fromCharCode.apply(null, buffer.subarray(i, i+CHUNK_SZ)));\n  }\n  return btoa(c.join(\"\"));\n}\n\nconst fromBase64 = (base64) => {\n  var binary_string = window.atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes;\n}\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","register","JSON","parse","$35da740d59af89ba$var$findById","document","querySelector","$35da740d59af89ba$var$userId","Math","floor","random","$35da740d59af89ba$var$cursorProfile","$35da740d59af89ba$var$connected","$35da740d59af89ba$var$scenarioReceived","$35da740d59af89ba$var$lastMoveMessage","performance","now","value","$35da740d59af89ba$var$scenario","Automerge","init","addEventListener","replace","socket","WebSocket","event","message","data","binary","$35da740d59af89ba$var$fromBase64","merge","load","$35da740d59af89ba$var$render","changes","newScenario","diff","applyChanges","cursor","userId","$35da740d59af89ba$var$addCursor","undefined","console","log","send","stringify","e","profile","x","y","clientX","clientY","window","updateNode","nodeId","split","change","doc","node","nodes","find","n","$35da740d59af89ba$var$isChecked","status","getChanges","$35da740d59af89ba$var$toBase64","$35da740d59af89ba$var$buildChangesMessage","$35da740d59af89ba$var$cursors","$35da740d59af89ba$var$cursorColors","$35da740d59af89ba$var$cursorTextColors","$35da740d59af89ba$var$cursorTargetPosition","$35da740d59af89ba$var$scenarioGraph","next","$35da740d59af89ba$var$deltaTime","$35da740d59af89ba$var$clock","THREE","Clock","cursorId","nameId","t","$35da740d59af89ba$var$cursorTemplate","innerHTML","style","cursorTarget","c","push","$35da740d59af89ba$var$animationFrame","requestAnimationFrame","getDelta","dt","querySelectorAll","forEach","targetPosition","cursorRect","getBoundingClientRect","left","MathUtils","damp","top","$35da740d59af89ba$var$findInGraphById","g","checked","canvas","ctx","getContext","width","body","clientWidth","height","clientHeight","clearRect","graphNode","nextNode","beginPath","lineWidth","setLineDash","moveTo","lineTo","stroke","arc","PI","fill","buffer","String","fromCharCode","apply","subarray","btoa","join","base64","binary_string","atob","len","bytes","Uint8Array","charCodeAt"],"version":3,"file":"index.cab0b727.js.map"}